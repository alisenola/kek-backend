// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	database "kek-backend/internal/article/database"

	mock "github.com/stretchr/testify/mock"

	model "kek-backend/internal/article/model"
)

// ArticleDB is an autogenerated mock type for the ArticleDB type
type ArticleDB struct {
	mock.Mock
}

// DeleteArticleBySlug provides a mock function with given fields: ctx, authorId, slug
func (_m *ArticleDB) DeleteArticleBySlug(ctx context.Context, authorId uint, slug string) error {
	ret := _m.Called(ctx, authorId, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, authorId, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommentById provides a mock function with given fields: ctx, authorId, slug, id
func (_m *ArticleDB) DeleteCommentById(ctx context.Context, authorId uint, slug string, id uint) error {
	ret := _m.Called(ctx, authorId, slug, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, uint) error); ok {
		r0 = rf(ctx, authorId, slug, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComments provides a mock function with given fields: ctx, authorId, slug
func (_m *ArticleDB) DeleteComments(ctx context.Context, authorId uint, slug string) (int64, error) {
	ret := _m.Called(ctx, authorId, slug)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) int64); ok {
		r0 = rf(ctx, authorId, slug)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, authorId, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindArticleBySlug provides a mock function with given fields: ctx, slug
func (_m *ArticleDB) FindArticleBySlug(ctx context.Context, slug string) (*model.Article, error) {
	ret := _m.Called(ctx, slug)

	var r0 *model.Article
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Article); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindArticles provides a mock function with given fields: ctx, criteria
func (_m *ArticleDB) FindArticles(ctx context.Context, criteria database.IterateArticleCriteria) ([]*model.Article, int64, error) {
	ret := _m.Called(ctx, criteria)

	var r0 []*model.Article
	if rf, ok := ret.Get(0).(func(context.Context, database.IterateArticleCriteria) []*model.Article); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Article)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, database.IterateArticleCriteria) int64); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, database.IterateArticleCriteria) error); ok {
		r2 = rf(ctx, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindComments provides a mock function with given fields: ctx, slug
func (_m *ArticleDB) FindComments(ctx context.Context, slug string) ([]*model.Comment, error) {
	ret := _m.Called(ctx, slug)

	var r0 []*model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Comment); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunInTx provides a mock function with given fields: ctx, f
func (_m *ArticleDB) RunInTx(ctx context.Context, f func(context.Context) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveArticle provides a mock function with given fields: ctx, article
func (_m *ArticleDB) SaveArticle(ctx context.Context, article *model.Article) error {
	ret := _m.Called(ctx, article)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Article) error); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveComment provides a mock function with given fields: ctx, slug, comment
func (_m *ArticleDB) SaveComment(ctx context.Context, slug string, comment *model.Comment) error {
	ret := _m.Called(ctx, slug, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Comment) error); ok {
		r0 = rf(ctx, slug, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
